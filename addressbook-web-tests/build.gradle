apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    agent
}

dependencies {
    implementation 'org.testng:testng:7.3.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.0.0-alpha-7'
    implementation 'com.google.guava:guava:30.0-jre'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.hamcrest:hamcrest:2.2'
    implementation 'com.beust:jcommander:1.78'
    implementation 'com.thoughtworks.xstream:xstream:1.4.15'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'mysql:mysql-connector-java:8.0.23'
    implementation 'org.hibernate:hibernate-core:5.4.27.Final'
    agent "org.aspectj:aspectjweaver:1.8.0"
    compile "ru.yandex.qatools.allure:allure-testng-adaptor:1.4.0.RC4"
    implementation 'org.robotframework:robotframework:3.2.2'
    implementation 'io.cucumber:cucumber-java:6.9.1'
    implementation 'io.cucumber:cucumber-testng:6.9.1'
}

task testGroups(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-groups.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

testGroups.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

task testContacts(type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-contacts.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUi')) {
        systemProperty 'verifyUi', "${verifyUi}"
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

task rf(type: JavaExec) {
main = 'org.robotframework.RobotFramework'
    classpath = sourceSets.test.runtimeClasspath
    args '--output/dir', 'build/rf-report'
    args 'src/test/resources/rf'
}
